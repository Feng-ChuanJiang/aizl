<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="      
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.2.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
           http://www.springframework.org/schema/cache
           http://www.springframework.org/schema/cache/spring-cache-3.2.xsd
           http://www.springframework.org/schema/mvc
           http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">
	<mvc:resources mapping="/js/**" location="/js/" />
	<mvc:resources mapping="/ajax/**" location="/ajax/" />
	<mvc:resources mapping="/css/**" location="/css/" />
	<mvc:resources mapping="/fonts/**" location="/fonts/" />
	<mvc:resources mapping="/img/**" location="/img/" />
	<mvc:resources mapping="/sound/**" location="/sound/" />
	<mvc:resources mapping="/jsp/**" location="/jsp/" />
	<context:property-placeholder location="classpath:deploys/deploy.properties" />
	<bean id="handlerMapping"
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"></bean>
	<bean id="conversionService"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="converters">
			<list>
				<bean class="org.springframework.core.convert.support.StringToEnumConverterFactory" />
				<bean class="org.lemonPig.os.assist.spring.StringToDateConvert" />
			</list>
		</property>
	</bean>
	<context:component-scan base-package="org.lemonPig.os"
		use-default-filters="false">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:include-filter type="annotation"
			expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>
	<!--enableMatrixVariables：启动注解@MatrixVariable,validator：引用jsr验证 , conversion-Service：controller方法进入前前调用，相当于@initbinder注解的方法 
		， content-negotiation-manager：内容管理器，动态选择返回数据的格式 -->
	<mvc:annotation-driven enableMatrixVariables="true"
		validator="validator" conversion-service="conversionService"
		content-negotiation-manager="contentNegotiationManager">
		<!--enableMatrixVariables="true"> -->
		<!-- 异步支持 默认30秒超时 -->
		<mvc:async-support default-timeout="30000"
			task-executor="executor" />
		<!-- controller返回的结果将已声明的converter顺序去尝试解释，直到首个成功 -->
		<mvc:message-converters register-defaults="true">
			<!-- StringHttpMessageConverter编码为UTF-8，防止乱码,原样输出controller的返回字符串到页面 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg value="UTF-8" />
				<property name="supportedMediaTypes">
					<list>
						<bean class="org.springframework.http.MediaType">
							<constructor-arg index="0" value="text" />
							<constructor-arg index="1" value="html" />
							<constructor-arg index="2" value="UTF-8" />
						</bean>
					</list>
				</property>
			</bean>

			<!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
			<bean id="mappingJacksonHttpMessageConverter"
				class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>application/json;charset=UTF-8</value>
					</list>
				</property>
				<!--<property name="serializerFeature"> -->
				<!--这个地方加上这个功能吧，能自己配置一些东西，比如时间的格式化，null输出""等等 -->
				<!--</property> -->
			</bean>
		</mvc:message-converters>

	</mvc:annotation-driven>


	<!-- 内容协商管理器，主要用途是根据解析的请求头去匹配适合的返回格式 -->
	<bean id="contentNegotiationManager"
		class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<!-- 扩展名至mimeType的映射,即 /user.json => application/json -->
		<property name="favorPathExtension" value="true" />
		<!-- 用于开启 /userinfo/123?format=json 的支持 -->
		<property name="favorParameter" value="true" />
		<property name="parameterName" value="format" />
		<!-- 是否忽略Accept Header -->
		<property name="ignoreAcceptHeader" value="false" />
		<property name="mediaTypes"> <!--扩展名到MIME的映射；favorPathExtension, favorParameter是true时起作用 -->
			<value>
				json=application/json
				<!-- xml=application/xml -->
				html=text/html
			</value>
		</property>
		<!-- 默认的content type -->
		<property name="defaultContentType" value="text/html" />
	</bean>
	<!-- ========================= VIEW定义 ========================= -->
	<!-- 内容协商视图解析器；根据客户端的不同的请求决定不同的 view进行响应, 如 /blog/1.json /blog/1.xml -->
	<!-- 会自动根据解析的contentType来决定使用哪个视图解析器（默认使用整个web应用中的viewResolver） -->
	<bean id="contentNegotiatingViewResolver"
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver"
		p:order="0">
		<!-- 内容协商管理器 用于决定media type -->
		<property name="contentNegotiationManager" ref="contentNegotiationManager" />
		<!-- 默认视图 放在解析链最后 -->
		<property name="defaultViews">
			<list>
				<bean
					class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" />

				<!-- JAXB XML View -->
				<!-- <bean class="org.springframework.web.servlet.view.xml.MarshallingView"> -->
				<!-- <constructor-arg> -->
				<!-- <bean class="org.springframework.oxm.jaxb.Jaxb2Marshaller"> -->
				<!-- <property name="classesToBeBound"> -->
				<!-- <list> -->
				<!-- <value>org.lemonPig.os.web.vo.Result</value> -->
				<!-- <value>org.lemonPig.os.core.dto.User</value> -->
				<!-- </list> -->
				<!-- </property> -->
				<!-- </bean> -->
				<!-- </constructor-arg> -->
				<!-- </bean> -->
				<!-- <bean class="com.alibaba.fastjson.support.spring.FastJsonJsonView" 
					/> -->
				<!--<bean class="org.springframework.web.servlet.view.xml.MarshallingView"/> -->
			</list>

		</property>
	</bean>

	<!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用jsp)- -->
	<bean id="defaultViewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:order="1">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="contentType" value="text/html" />
		<property name="prefix" value="/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 文件上传相关 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!--one of the properties available;the maximum upload size in bytes 100M -->
		<property name="maxUploadSize" value="104857600" />
	</bean>

	<!-- 控制器异常处理 -->
	<bean id="exceptionHandlerExceptionResolver"
		class="org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver">
		<property name="contentNegotiationManager" ref="contentNegotiationManager" />
	</bean>

	<!-- jsr验证 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<property name="validationMessageSource" ref="messageSource" />
	</bean>

	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>plugins/spring/messages</value>
				<value>classpath:org/hibernate/validator/ValidationMessages</value>
			</list>
		</property>
		<property name="useCodeAsDefaultMessage" value="false" />
		<property name="defaultEncoding" value="UTF-8" />
		<property name="cacheSeconds" value="60" />
	</bean>

	<aop:aspectj-autoproxy proxy-target-class="true" />
	<!-- 根据spring匹配的controller映射关系初始化数据库资源表 -->
	<bean
		class="org.lemonPig.os.core.support.DatabaseInitializerDependOnSpringmvc">
		<property name="handlerMapping" ref="handlerMapping" />
		<!--资源表初始化模式CREATE:删除全表后创建,UPDATE：存在更新，否则创建 -->
		<property name="databaseInitModel" value="CREATE" />
	</bean>
</beans>