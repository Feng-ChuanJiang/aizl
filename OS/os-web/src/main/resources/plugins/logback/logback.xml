<?xml version="1.0" encoding="UTF-8"?>
<!-- 参考文档http://logback.qos.ch/manual/appenders.html -->
<configuration scan="true" scanPeriod="1800 seconds"
	debug="false">
	<!-- 定义日志文件 输入位置 -->
	<property name="log_dir" value="logs" />
	<!-- 日志最大的历史 30天 -->
	<property name="maxHistory" value="30" />

	<!-- ConsoleAppender 控制台输出日志 -->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<!-- 对日志进行格式化 -->
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger -%msg%n
			</pattern>
		</encoder>
	</appender>
	<!-- ERROR级别日志 -->
	<!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender -->
	<appender name="ERROR"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<Encoding>UTF-8</Encoding>
		<!-- 过滤器，只记录WARN级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<!--如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true -->
		<append>true</append>
		<!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--日志输出位置 可相对、和绝对路径 -->
			<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/error.%i.log
			</fileNamePattern>
			<!-- 历史有效天数，不包括当天 -->
			<maxHistory>30</maxHistory>
			<!-- 注意：该位置设置的是第一个日志文件大小限制，如果超出限制将成倍增加文件大小 -->
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger -
				%msg%n</pattern>
		</encoder>
	</appender>

	<!-- WARN级别日志 appender -->
	<appender name="WARN"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<Encoding>UTF-8</Encoding>
		<!-- 过滤器，只记录WARN级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>WARN</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<!--如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true -->
		<append>true</append>
		<!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--日志输出位置 可相对、和绝对路径 -->
			<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/warn.%i.log
			</fileNamePattern>
			<!-- 历史有效天数，不包括当天 -->
			<maxHistory>30</maxHistory>
			<!-- 注意：该位置设置的是第一个日志文件大小限制，如果超出限制将成倍增加文件大小 -->
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger -
				%msg%n</pattern>
		</encoder>
	</appender>

	<!-- INFO级别日志 appender -->
	<appender name="INFO"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<Encoding>UTF-8</Encoding>
		<!-- 过滤器，只记录INFO级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<!--如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true -->
		<append>true</append>
		<!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--日志输出位置 可相对、和绝对路径 -->
			<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/info.%i.log
			</fileNamePattern>
			<!-- 历史有效天数，不包括当天 -->
			<maxHistory>30</maxHistory>
			<!-- 注意：该位置设置的是第一个日志文件大小限制，如果超出限制将成倍增加文件大小 -->
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger -
				%msg%n</pattern>
		</encoder>
	</appender>

	<!-- DEBUG级别日志 appender -->
	<appender name="DEBUG"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<Encoding>UTF-8</Encoding>
		<!-- 过滤器，只记录DEBUG级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<!--如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true -->
		<append>true</append>
		<!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--日志输出位置 可相对、和绝对路径 -->
			<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/debug.%i.log
			</fileNamePattern>
			<!-- 历史有效天数，不包括当天 -->
			<maxHistory>30</maxHistory>
			<!-- 注意：该位置设置的是第一个日志文件大小限制，如果超出限制将成倍增加文件大小 -->
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger -
				%msg%n</pattern>
		</encoder>
	</appender>

	<!-- TRACE级别日志 appender -->
	<appender name="TRACE"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<Encoding>UTF-8</Encoding>
		<!-- 过滤器，只记录ERROR级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>TRACE</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<!--如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true -->
		<append>true</append>
		<!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--日志输出位置 可相对、和绝对路径 -->
			<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/trace.%i.log
			</fileNamePattern>
			<!-- 历史有效天数，不包括当天 -->
			<maxHistory>30</maxHistory>
			<!-- 注意：该位置设置的是第一个日志文件大小限制，如果超出限制将成倍增加文件大小 -->
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger -
				%msg%n</pattern>
		</encoder>
	</appender>

	<!-- 访问日志 appender -->
	<appender name="ACCESS"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<Encoding>UTF-8</Encoding>
		<!-- 过滤器，只记录ERROR级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ACCESS</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<!--如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true -->
		<append>true</append>
		<!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--日志输出位置 可相对、和绝对路径 -->
			<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/access.%i.log
			</fileNamePattern>
			<!-- 历史有效天数，不包括当天 -->
			<maxHistory>30</maxHistory>
			<!-- 注意：该位置设置的是第一个日志文件大小限制，如果超出限制将成倍增加文件大小 -->
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger -
				%msg%n</pattern>
		</encoder>
	</appender>
	<logger name="com.ibatis" level="DEBUG" />
	<logger name="com.ibatis.common.jdbc.SimpleDataSource" level="DEBUG" />
	<logger name="com.ibatis.common.jdbc.ScriptRunner" level="DEBUG" />
	<logger name="com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate"
		level="DEBUG" />
	<logger name="java.sql.Connection" level="DEBUG" />
	<logger name="java.sql.Statement" level="DEBUG" />
	<logger name="java.sql.PreparedStatement" level="DEBUG" />


	<!-- root级别 INFO -->
	<root level="DEBUG">
		<!-- 控制台输出 -->
		<appender-ref ref="STDOUT" />
		<!-- 文件输出 -->
		<appender-ref ref="ERROR" />
		<appender-ref ref="INFO" />
		<appender-ref ref="WARN" />
		<appender-ref ref="DEBUG" />
		<appender-ref ref="TRACE" />
		<appender-ref ref="ACCESS" />
	</root>

</configuration>